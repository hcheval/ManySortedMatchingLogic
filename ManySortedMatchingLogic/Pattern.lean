import Mathlib

set_option autoImplicit false

structure EVar (S : Type) where
  name : Nat
  sort : S
  deriving DecidableEq

structure SVar (S : Type) where
  name : Nat
  sort : S
  deriving DecidableEq

structure Signature (Symbol : Type) (S : Type) where
  domain : Symbol ‚Üí (Nat ‚Üí S)
  target : Symbol ‚Üí S
  arity : Nat

-- structure Context (S : Type) where
--   evar : EVar ‚Üí S
--   svar : SVar ‚Üí S

-- namespace Context

--   variable {S : Type}

--   @[simp]
--   def evarUpdate (x : EVar S) (s : S) :=
--     {ctx with evar := Function.update ctx.evar x s}

--   @[simp]
--   def svarUpdate (X : SVar S) (s : S) :=
--     {ctx with svar := Function.update ctx.svar X s}

-- end Context

inductive Pattern {Symbol : Type} {S : Type} (sgn : Signature Symbol S) : Type where
| evar : EVar S ‚Üí Pattern sgn
| svar : SVar S ‚Üí Pattern sgn
| implication : Pattern sgn ‚Üí Pattern sgn ‚Üí Pattern sgn
| application : Symbol ‚Üí (Nat ‚Üí Pattern sgn) ‚Üí Pattern sgn
| existential : EVar S ‚Üí Pattern sgn ‚Üí Pattern sgn
| mu : SVar S ‚Üí Pattern sgn ‚Üí Pattern sgn
| bottom : Pattern sgn

section
  namespace Pattern

  variable {Symbol S : Type} {sgn : Signature Symbol S}

  infixr:60 (priority := high) " ‚áí " => implication

  infixl:65 " ‚¨ù " => application

  notation "‚àÉ‚àÉ " => existential

  notation "Œº " => mu

  -- def bottom {sort : S} (X : SVar S := ‚ü®0, sort‚ü©) : Pattern sgn := Œº X (.svar X)

  notation (priority := high) "‚ä•" => bottom

  variable (œÜ œà : Pattern sgn)

  @[match_pattern] def negation := œÜ ‚áí ‚ä•
  prefix:70 "‚àº" => negation

  notation "‚ä§" => ‚àº‚ä•

  /-- Disjunction of two patterns. -/
  @[match_pattern] def disjunction := ‚àºœÜ ‚áí œà
  /-- Notation for `Pattern.disjunction -/
  infixl:65 " ‚ãÅ " => disjunction

  /-- Conjunction of two patterns. -/
  @[match_pattern] def conjunction := ‚àº(‚àºœÜ ‚ãÅ ‚àºœà)
  /-- Notation for `Pattern.conjunction` -/
  infixl:65 " ‚ãÄ " => conjunction

  @[match_pattern] def universal (x : EVar S) (œÜ : Pattern sgn) := ‚àº(‚àÉ‚àÉ x (‚àºœÜ))
  /-- Notation for `Pattern.universal` -/
  notation "‚àÄ‚àÄ " => universal

  instance : Coe (EVar S) (Pattern sgn) where
    coe := Pattern.evar

  instance : Coe (SVar S) (Pattern sgn) where
    coe := Pattern.svar

  end Pattern
end




section
  namespace Pattern

  variable {Symbol S : Type} [DecidableEq S] {sgn : Signature Symbol S}

  @[simp]
  def substEVar (œÜ : Pattern sgn) (x : EVar S) (z : EVar S) :  Pattern sgn :=
    match œÜ with
    | .evar y =>
      if x = y then
        .evar x
      else
        .evar y
    | .svar X => .svar X
    | œÉ ‚¨ù args =>
      œÉ ‚¨ù (fun i => (args i).substEVar x z)
    | œÜ‚ÇÅ ‚áí œÜ‚ÇÇ =>
      œÜ‚ÇÅ.substEVar x z ‚áí œÜ‚ÇÇ.substEVar x z
    | ‚àÉ‚àÉ y œÜ =>
      if x = y then
        ‚àÉ‚àÉ y œÜ
      else
        ‚àÉ‚àÉ y (œÜ.substEVar x z)
    | Œº X œÜ => Œº X (œÜ.substEVar x z)
    | ‚ä• => ‚ä•
  notation œÜ "[" x " ‚áê·µâ " y "]" => substEVar œÜ x y



  @[simp]
  def substSVar (œÜ : Pattern sgn) (X : SVar S) (œá : Pattern sgn) : Pattern sgn :=
    match œÜ with
    | .evar x => .evar x
    | .svar Y =>
      if X = Y then
        œá
      else
        .svar Y
    | œÉ ‚¨ù args =>
      œÉ ‚¨ù (fun i => (args i).substSVar X œá)
    | œÜ‚ÇÅ ‚áí œÜ‚ÇÇ =>
      œÜ‚ÇÅ.substSVar X œá ‚áí œÜ‚ÇÇ.substSVar X œá
    | Œº Y œÜ =>
      if X = Y then
        Œº Y œÜ
      else
        Œº Y (œÜ.substSVar X œá)
    | ‚àÉ‚àÉ x œÜ =>
      ‚àÉ‚àÉ x (œÜ.substSVar X œá)
    | ‚ä• => ‚ä•
  notation œÜ "[" X " ‚áêÀ¢ " œà "]" => substSVar œÜ X œà


  @[simp]
  def FreeEVar : EVar S ‚Üí Pattern sgn ‚Üí Prop :=
    fun x œÜ => match œÜ with
    | .svar _ => False
    | .evar y => x = y
    | œÜ‚ÇÅ ‚áí œÜ‚ÇÇ => FreeEVar x œÜ‚ÇÅ ‚à® FreeEVar x œÜ‚ÇÇ
    | œÉ ‚¨ù args => ‚àÉ i, FreeEVar x (args i)
    -- | œÉ ‚¨ù args => ‚àÉ i, FreeEVar x (œÉ ‚¨ù args)
    | ‚àÉ‚àÉ y œÜ' => x ‚â† y ‚àß FreeEVar x œÜ'
    | Œº _ œÜ' => FreeEVar x œÜ'
    | ‚ä• => False

  @[simp]
  def FreeSVar : SVar S ‚Üí Pattern sgn ‚Üí Prop :=
    fun X œÜ => match œÜ with
    | .svar Y => X = Y
    | .evar _ => False
    | œÜ‚ÇÅ ‚áí œÜ‚ÇÇ => FreeSVar X œÜ‚ÇÅ ‚à® FreeSVar X œÜ‚ÇÇ
    | œÉ ‚¨ù args => ‚àÉ i, FreeSVar X (args i)
    -- | œÉ ‚¨ù args => ‚àÉ i, FreeSVar X (œÉ ‚¨ù args)
    | ‚àÉ‚àÉ _ œÜ' => FreeSVar X œÜ'
    | Œº Y œÜ' => X ‚â† Y ‚àß FreeSVar X œÜ'
    | ‚ä• => False

  def svarCount (œÜ : Pattern sgn) (X : SVar S) : Nat := sorry

  open Classical in
  @[simp]
  def SubstitutableEVarForIn (x : EVar S) (z : EVar S) : Pattern sgn ‚Üí Prop :=
    fun œÜ => match œÜ with
    | ‚àÉ‚àÉ y œÜ' =>
      if (‚àÉ‚àÉ y œÜ').FreeEVar x then
        z ‚â† y ‚àß SubstitutableEVarForIn x z œÜ'
      else
        True
    | Œº _ œÜ => SubstitutableEVarForIn x z œÜ
    | œÉ ‚¨ù args => ‚àÄ i, SubstitutableEVarForIn x z (args i)
    | œÜ‚ÇÅ ‚áí œÜ‚ÇÇ => SubstitutableEVarForIn x z œÜ‚ÇÅ ‚àß SubstitutableEVarForIn x z œÜ‚ÇÇ
    | _ => True

  open Classical in
  @[simp]
  def SubstitutableSVarForIn (X : SVar S) (œá : Pattern sgn) : Pattern sgn ‚Üí Prop :=
    fun œÜ => match œÜ with
    | ‚àÉ‚àÉ y œÜ' => SubstitutableSVarForIn X œá œÜ'
    | Œº Y œÜ' =>
      if (Œº Y œÜ').FreeSVar X then
        ¬¨œá.FreeSVar Y ‚àß SubstitutableSVarForIn X œá œÜ'
      else
        True
    | œÉ ‚¨ù args => ‚àÄ i, SubstitutableSVarForIn X œá (args i)
    | œÜ‚ÇÅ ‚áí œÜ‚ÇÇ => SubstitutableSVarForIn X œá œÜ‚ÇÅ ‚àß SubstitutableSVarForIn X œá œÜ‚ÇÇ
    | _ => True

  end Pattern
end





variable {Symbol S : Type} [DecidableEq S] {sgn : Signature Symbol S}

inductive WellSorted : Pattern sgn ‚Üí S ‚Üí Prop where
| evar {s} {x} : x.sort = s ‚Üí WellSorted (.evar x) s
| svar {s} {X} : X.sort = s ‚Üí WellSorted (.svar X) s
| implication {s} {œÜ œà} : WellSorted œÜ s ‚Üí WellSorted œà s ‚Üí WellSorted (œÜ ‚áí œà) s
| application {œÉ} {args} {s} : (‚àÄ i, WellSorted (args i) (sgn.domain œÉ i)) ‚Üí WellSorted (.application œÉ args) s
| existential {t : S} {x : EVar S} {œÜ : Pattern sgn} :
  WellSorted œÜ t ‚Üí WellSorted (‚àÉ‚àÉ x œÜ) t
| mu {s} {X} {œÜ} : WellSorted œÜ s ‚Üí WellSorted (Œº X œÜ) s
| bottom {s} : WellSorted ‚ä• s




section SubstitutabilityProofs
  namespace Pattern

  theorem substitutable_evar_of_not_free_occ {x : EVar S} {œÜ : Pattern sgn} :
    ¬¨FreeEVar x œÜ ‚Üí SubstitutableEVarForIn x x œÜ := by
    intros hnfv
    induction œÜ
    all_goals (aesop)



  theorem substitutable_evar_same (x : EVar S) (œÜ : Pattern sgn) : SubstitutableEVarForIn x x œÜ := by
    induction œÜ with
    | evar y =>
      by_cases h : x = y
      . simp [*] at *
      . simp [*] at *
    | existential y œÜ' ih =>
      by_cases h : (‚àÉ‚àÉ y œÜ').FreeEVar x
      . by_cases h' : y = x
        . aesop
        . aesop
      . apply substitutable_evar_of_not_free_occ h
    | _ => simp [*] at *

  @[simp]
  theorem subst_var_var_eq_self_evar (œÜ : Pattern sgn) (x : EVar S) : œÜ.substEVar x x = œÜ := by
    induction œÜ with
    | evar y =>
      by_cases h : x = y <;> simp [*]
    | _ => simp [*]

    done


  theorem substitutable_svar_of_not_free_occ {œÜ : Pattern sgn} {œà : Pattern sgn} {X : SVar S} :
    ¬¨œÜ.FreeSVar X ‚Üí SubstitutableSVarForIn X œà œÜ := by
    intros h
    induction œÜ with
    | mu Y œÜ' ih =>
      -- simp at *
      -- specialize ih h
      by_cases h' : X = Y
      . simp [*]
      . aesop
    | implication œÜ‚ÇÅ œÜ‚ÇÇ ih‚ÇÅ ih‚ÇÇ =>
      aesop
    | application œÉ œÜ ih =>
      aesop
    | existential y œÜ' ih =>
      simp [*] at * -- why is simp
      simp [*] at *
    | _ => simp

  -- theorem substitutable_svar_into_closed {œÜ œà : Pattern ùïä} {X : SVar} : œÜ.muClosed ‚Üí œà.substitutableForSvarIn X œÜ :=
  --   fun h => substitutable_svar_of_not_free_occ <| h _

  -- theorem substitutable_svar_of_closed {œÜ œà : Pattern ùïä} {X : SVar} : œà.muClosed ‚àß œà.existClosed ‚Üí œà.substitutableForSvarIn X œÜ := by
  --   intros h
  --   cases h with | intro h‚ÇÅ h‚ÇÇ =>
  --   induction œÜ with
  --   | mu Y œÜ' ih =>
  --     by_cases h' : X = Y
  --     . simp [*]
  --     . specialize h‚ÇÅ Y
  --       simp [*]
  --   | existential y œÜ' ih =>
  --     specialize h‚ÇÇ y
  --     by_cases h' : œÜ'.isFreeSvar X
  --     . simp [*] at *
  --     . simp [*] at *
  --   | _ => simp [*] at *



  theorem substitutable_svar_of_mu {œÜ : Pattern sgn} {œà : Pattern sgn} {X Y : SVar S} :
    X ‚â† Y ‚Üí SubstitutableSVarForIn X œà (Œº Y œÜ) ‚Üí SubstitutableSVarForIn X œà œÜ :=
  by
    intros h
    by_cases h' : (Œº Y œÜ).FreeSVar X
    . intros
      aesop?
      -- simp_all only [ne_eq, isFreeSvar, ite_false, substitutableForSvarIn, Bool.not_eq_true, Bool.decide_and,
      --   Bool.decide_coe, ite_true, Bool.and_eq_true, decide_eq_true_eq]
    . induction œÜ with
      | mu Z œÜ' ih =>
        intros h''
        by_cases hXY : X = Y <;> by_cases hYZ : Y = Z
        . simp [*] at *
        . simp [*] at *
        . by_cases hfv : FreeSVar X œÜ'
          . simp [*] at *
            -- simp only [*,, isFreeSvar, ite_eq_right_iff, Bool.not_eq_true, not_forall, exists_prop,
            -- and_true, Bool.decide_and, Bool.decide_coe, Bool.and_eq_true, decide_eq_true_eq, ne_eq, not_false_eq_true, IsEmpty.forall_iff, ite_false, and_self, forall_true_left] at *
            -- why is `simp` not idempotent? -- why is `simp` not idempotent?
            aesop
          . simp [*] at *
        . by_cases hfv : FreeSVar X œÜ'
          . simp [*] at *
            simp [*] at *
          . simp [*] at *
      | implication œÜ‚ÇÅ œÜ‚ÇÇ ih‚ÇÅ =>
        -- simp? [*] at *

        -- specialize ih‚ÇÅ h'.1
        -- specialize ih‚ÇÇ h'.2
        by_cases hfv : FreeSVar X œà
        . rename_i s_1
          intro a
          aesop?
          -- apply And.intro
          -- ¬∑ apply ih‚ÇÅ
          --   apply Aesop.BuiltinRules.not_intro
          --   intro a
          --   simp_all only [not_true, implies_true, SubstitutableSVarForIn._eq_5, IsEmpty.forall_iff, true_or]
          -- ¬∑ apply ih‚ÇÇ
          --   apply Aesop.BuiltinRules.not_intro
          --   intro a
          --   simp_all only [not_true, implies_true, SubstitutableSVarForIn._eq_5, IsEmpty.forall_iff, or_true]
        . aesop
      | application œÉ œÜ ih =>
        aesop?
      | existential x œÜ' ih =>
        -- simp only [*, substitutableForSvarIn, isFreeSvar, ite_false, Bool.not_eq_true, Bool.decide_and, Bool.decide_coe,
        --   ite_eq_right_iff, Bool.and_eq_true, decide_eq_true_eq, h] at *
        -- specialize ih h'
        by_cases hfv : FreeSVar X œà
        . aesop
        . aesop
      | _ => simp [*] at *


#check cast_eq

  @[simp]
  theorem subst_var_var_eq_self_svar (œÜ : Pattern sgn) (X : SVar S) : œÜ.substSVar X (.svar X) = œÜ := by
    induction œÜ with
    | svar Y =>
      by_cases h' : X = Y <;> simp [*]
    | _ => simp [*]

  @[simp]
  theorem subst_not_free_svar {œÜ : Pattern sgn} {X : SVar S} (œà : Pattern sgn) (not_fv : ¬¨œÜ.FreeSVar X) : œÜ.substSVar X œà = œÜ := by
    induction œÜ
    all_goals aesop
    -- | svar r Y =>
    --   -- by_cases h : r = t
    --   aesop
    -- | mu Y œÜ' ih =>
    --   by_cases h : X = Y
    --   . aesop
    --   . aesop
    -- | implication œÜ' œÜ'' ih' ih'' | application œÜ' œÜ'' ih' ih'' =>
    --   aesop
    -- | existential _ œÜ' ih' =>
    --   aesop
    -- | _ => simp [*]


  -- #check heq_of_cast_eq
  end Pattern
end SubstitutabilityProofs



section WellSortednessProofs



  @[simp]
  lemma well_sorted_evar {x : EVar S} {s : S} : WellSorted (.evar x : Pattern sgn) s ‚Üî x.sort = s := by
    constructor
    . intros h ; cases h ; assumption
    . intros h ; constructor ; assumption

  @[simp]
  lemma well_sorted_svar {X : SVar S} {s : S} : WellSorted (.svar X : Pattern sgn) s ‚Üî X.sort = s := by
    constructor
    . intros h ; cases h ; assumption
    . intros h ; constructor ; assumption

  @[simp]
  lemma well_sorted_implication {œÜ œà : Pattern sgn} {s} : WellSorted (œÜ ‚áí œà) s ‚Üî WellSorted œÜ s ‚àß WellSorted œà s := by
    constructor
    . intros h ; cases h ; aesop
    . intros h ; constructor <;> aesop

  @[simp]
  lemma well_sorted_application {œÉ : Symbol} {args : Nat ‚Üí Pattern sgn} {s : S} : WellSorted (œÉ ‚¨ù args) s ‚Üî ‚àÄ i, WellSorted (args i) (sgn.domain œÉ i) := by
    constructor
    . intros h ; intros i ; cases h ; aesop
    . intros h ; constructor ; assumption

  @[simp]
  lemma well_sorted_existential {x : EVar S} {œÜ : Pattern sgn} {t : S} :  WellSorted œÜ t ‚Üî WellSorted (‚àÉ‚àÉ x œÜ) t := by
    constructor
    . intros h ; apply WellSorted.existential h
    . intros h ; cases h ; assumption

  @[simp]
  lemma well_sorted_mu {X : SVar S} {œÜ : Pattern sgn} {s : S} :  WellSorted œÜ s ‚Üî WellSorted (Œº X œÜ) s := by
    constructor
    . intros h ; constructor ; assumption
    . intros h ; cases h ; assumption




  lemma unique_sorted {œÜ : Pattern sgn} {s‚ÇÅ s‚ÇÇ : S} :
    WellSorted œÜ s‚ÇÅ ‚Üí WellSorted œÜ s‚ÇÇ ‚Üí s‚ÇÅ = s‚ÇÇ := by
    intros h‚ÇÅ h‚ÇÇ
    induction œÜ with
    | application œÉ args ih =>
      -- specialize ih 0
      sorry

    | _ => sorry

  lemma subst_evar_well_sorted (œÜ : Pattern sgn) (x : EVar S) (z : EVar S) (s : S) :
    WellSorted œÜ s ‚Üí WellSorted (œÜ.substEVar x z) s := by
    intros h
    induction œÜ generalizing s with
    | evar y =>
      by_cases h' : x = y
      . aesop
      . aesop
    | svar Y =>
      aesop
    | implication œÜ‚ÇÅ œÜ‚ÇÇ ih‚ÇÅ ih‚ÇÇ =>
      aesop
    | application œÉ args ih =>
      aesop
    | existential y œÜ ih =>
      by_cases h' : x = y
      . aesop
      . rw [‚Üê well_sorted_existential] at h
        specialize @ih
        have : Pattern.substEVar (‚àÉ‚àÉ y œÜ) x z = ‚àÉ‚àÉ y (Pattern.substEVar œÜ x z) := by simp [*]
        rw [this]
        constructor
        specialize ih _ h
        assumption
    | mu Y œÜ ih =>
      rw [‚Üê well_sorted_mu] at h
      constructor
      specialize @ih _ h
      assumption
    | bottom =>
      simpa

  lemma subst_svar_well_sorted {œÜ : Pattern sgn} (X : SVar S) {œá : Pattern sgn} {s t : S} :
    WellSorted œÜ s ‚Üí
    WellSorted œá t ‚Üí
    X.sort = t ‚Üí
    Pattern.SubstitutableSVarForIn X œá œÜ ‚Üí
    WellSorted (œÜ.substSVar X œá) s :=
  by
    intros h hœá hsub
    -- sorry
    induction œÜ generalizing s with
    | svar Y =>
      by_cases h' : X = Y
      . aesop
      . aesop
    | mu Y œÜ ih =>
      by_cases h' : X = Y
      . aesop
      . intros hsub
        by_cases h'' : œÜ.FreeSVar X
        . have : ¬¨Pattern.FreeSVar Y œá ‚àß Pattern.SubstitutableSVarForIn X œá œÜ := by aesop
          rw [‚Üê well_sorted_mu] at h
          specialize ih h this.2
          simp only [Pattern.substSVar, ite_false, *]
          constructor
          assumption
        . have : ¬¨(Œº Y œÜ).FreeSVar X := by aesop
          rw [Pattern.subst_not_free_svar _ this]
          exact h
    | application œÉ args ih =>
      intros hsub
      aesop
    | implication œÜ‚ÇÅ œÜ‚ÇÇ ih‚ÇÅ ih‚ÇÇ =>
      aesop
    | existential x œÜ' ih =>
      intros hsub
      rw [‚Üê well_sorted_existential] at h
      specialize ih h hsub
      simp only [Pattern.substSVar]
      constructor
      assumption
    | evar =>
      aesop
    | bottom =>
      aesop


end WellSortednessProofs


mutual
  inductive NegativeOcc : SVar S ‚Üí Pattern sgn ‚Üí Prop where
  | implication_left {X} {œÜ‚ÇÅ œÜ‚ÇÇ} :
    PositiveOcc X œÜ‚ÇÅ ‚Üí NegativeOcc X (œÜ‚ÇÅ ‚áí œÜ‚ÇÇ)
  | implication_right {X} {œÜ‚ÇÅ œÜ‚ÇÇ} :
    NegativeOcc X œÜ‚ÇÇ ‚Üí NegativeOcc X (œÜ‚ÇÅ ‚áí œÜ‚ÇÇ)
  | application {X} {œÉ} {œÜ : Nat ‚Üí Pattern sgn} {i} :
    NegativeOcc X (œÜ i) ‚Üí NegativeOcc X (œÉ ‚¨ù œÜ)
  | existential {X} {y} {œÜ} :
    NegativeOcc X œÜ ‚Üí NegativeOcc X (‚àÉ‚àÉ y œÜ)
  | mu {X} {Y} {œÜ} :
    NegativeOcc X œÜ ‚Üí X ‚â† Y ‚Üí NegativeOcc X (Œº Y œÜ)

  inductive PositiveOcc : SVar S ‚Üí Pattern sgn ‚Üí Prop where
  | svar {X} :
    PositiveOcc X (.svar X)
  | implication_left {X} {œÜ‚ÇÅ œÜ‚ÇÇ} :
    NegativeOcc X œÜ‚ÇÅ ‚Üí PositiveOcc X (œÜ‚ÇÅ ‚áí œÜ‚ÇÇ)
  | implication_right {X} {œÜ‚ÇÅ œÜ‚ÇÇ} :
    PositiveOcc X œÜ‚ÇÇ ‚Üí PositiveOcc X (œÜ‚ÇÅ ‚áí œÜ‚ÇÇ)
  | application {X} {œÉ} {œÜ : Nat ‚Üí Pattern sgn} {i} :
    PositiveOcc X (œÜ i) ‚Üí PositiveOcc X (œÉ ‚¨ù œÜ)
  | existential {X} {y} {œÜ} :
    PositiveOcc X œÜ ‚Üí PositiveOcc X (‚àÉ‚àÉ y œÜ)
  | mu {X} {Y} {œÜ} :
    PositiveOcc X œÜ ‚Üí X ‚â† Y ‚Üí PositiveOcc X (Œº Y œÜ)
end







structure AppContext (sgn : Signature Symbol S) where
  hole : ‚Ñï
  symbol : Symbol
  args : ‚Ñï ‚Üí Pattern sgn
  args_well_sorted : ‚àÄ i, i ‚â† hole ‚Üí WellSorted (args i) (sgn.domain symbol i)

def AppContext.holeSort (C : AppContext sgn) : S :=
  sgn.domain C.symbol C.hole

def AppContext.insert (C : AppContext sgn) (œÜ : Pattern sgn) : Pattern sgn :=
  C.symbol ‚¨ù Function.update C.args C.hole œÜ

example {C : AppContext sgn} {œÜ : Pattern sgn} {s t} : s = C.holeSort ‚Üí WellSorted œÜ s ‚Üí WellSorted (C.insert œÜ) t := by
  intros h h'
  constructor
  intros i
  by_cases h'' : i = C.hole
  . simp [Function.update, *]
    aesop
  . simp [Function.update, *]
    have := C.args_well_sorted i
    aesop

def AppContext.FreeEVar (C : AppContext sgn) (x : EVar S) : Prop :=
  ‚àÉ i, C.args i |>.FreeEVar x


inductive NestedContext (sgn : Signature Symbol S) where
| empty : NestedContext sgn
| nest : AppContext sgn ‚Üí NestedContext sgn ‚Üí NestedContext sgn

@[simp]
def NestedContext.insert (C : NestedContext sgn) (œÜ : Pattern sgn) : Pattern sgn :=
  match C with
  | .empty => œÜ
  | .nest CœÉ C => CœÉ.insert (C.insert œÜ)

theorem NestedContext.nest_insert (CœÉ : AppContext sgn) (C : NestedContext sgn) (œÜ : Pattern sgn ) :
  (NestedContext.nest CœÉ C).insert œÜ = CœÉ.insert (C.insert œÜ) := rfl

/-- Notation for `Nested.insert`-/
notation C "[" œÜ "]" => NestedContext.insert C œÜ
/-- Notation for `Nested.empty` -/
notation "‚ñ°" => NestedContext.empty

@[simp]
def NestedContext.FreeEVar (x : EVar S) (C : NestedContext sgn ) : Prop :=
  match C with
  | .empty => False
  | .nest CœÉ C => CœÉ.FreeEVar x ‚à® C.FreeEVar x



-- structure AppContext (sgn : Signature Symbol S) where
--   hole : SVar S
--   pattern : Pattern sgn
--   is_linear : True
--   is_app : True

-- def AppContext.insert (C : AppContext sgn) (œÜ : Pattern sgn) : Pattern sgn := sorry
